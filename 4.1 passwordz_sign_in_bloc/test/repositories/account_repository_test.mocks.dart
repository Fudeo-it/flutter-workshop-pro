// Mocks generated by Mockito 5.3.2 from annotations
// in passwordz/test/repositories/account_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:logger/src/logger.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:passwordz/models/account.dart' as _i3;
import 'package:passwordz/repositories/mappers/account_mapper.dart' as _i8;
import 'package:passwordz/services/network/account_service.dart' as _i5;
import 'package:passwordz/services/network/dto/password_dto.dart' as _i4;
import 'package:passwordz/services/network/dto/passwords_response.dart' as _i2;
import 'package:passwordz/services/network/dto/update_account_request.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePasswordsResponse_0 extends _i1.SmartFake
    implements _i2.PasswordsResponse {
  _FakePasswordsResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccount_1 extends _i1.SmartFake implements _i3.Account {
  _FakeAccount_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePasswordDTO_2 extends _i1.SmartFake implements _i4.PasswordDTO {
  _FakePasswordDTO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountService extends _i1.Mock implements _i5.AccountService {
  MockAccountService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.PasswordsResponse> all() => (super.noSuchMethod(
        Invocation.method(
          #all,
          [],
        ),
        returnValue:
            _i6.Future<_i2.PasswordsResponse>.value(_FakePasswordsResponse_0(
          this,
          Invocation.method(
            #all,
            [],
          ),
        )),
      ) as _i6.Future<_i2.PasswordsResponse>);
  @override
  _i6.Future<_i2.PasswordsResponse> update(_i7.UpdateAccountRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [request],
        ),
        returnValue:
            _i6.Future<_i2.PasswordsResponse>.value(_FakePasswordsResponse_0(
          this,
          Invocation.method(
            #update,
            [request],
          ),
        )),
      ) as _i6.Future<_i2.PasswordsResponse>);
}

/// A class which mocks [AccountMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountMapper extends _i1.Mock implements _i8.AccountMapper {
  MockAccountMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Account fromDTO(_i4.PasswordDTO? dto) => (super.noSuchMethod(
        Invocation.method(
          #fromDTO,
          [dto],
        ),
        returnValue: _FakeAccount_1(
          this,
          Invocation.method(
            #fromDTO,
            [dto],
          ),
        ),
      ) as _i3.Account);
  @override
  _i4.PasswordDTO toDTO(_i3.Account? model) => (super.noSuchMethod(
        Invocation.method(
          #toDTO,
          [model],
        ),
        returnValue: _FakePasswordDTO_2(
          this,
          Invocation.method(
            #toDTO,
            [model],
          ),
        ),
      ) as _i4.PasswordDTO);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i9.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void d(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void i(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void w(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void e(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void wtf(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void log(
    _i9.Level? level,
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
