// Mocks generated by Mockito 5.3.2 from annotations
// in passwordz/test/blocs/account_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:logger/logger.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:passwordz/models/account.dart' as _i8;
import 'package:passwordz/repositories/account_repository.dart' as _i6;
import 'package:passwordz/services/network/account_service.dart' as _i2;
import 'package:passwordz/services/network/dto/password_dto.dart' as _i7;
import 'package:pine/dto/dto.dart' as _i3;
import 'package:pine/utils/mapper.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountService_0 extends _i1.SmartFake
    implements _i2.AccountService {
  _FakeAccountService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDTOMapper_1<DTO extends _i3.DTO, Model> extends _i1.SmartFake
    implements _i4.DTOMapper<DTO, Model> {
  _FakeDTOMapper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_2 extends _i1.SmartFake implements _i5.Logger {
  _FakeLogger_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i6.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountService get accountService => (super.noSuchMethod(
        Invocation.getter(#accountService),
        returnValue: _FakeAccountService_0(
          this,
          Invocation.getter(#accountService),
        ),
      ) as _i2.AccountService);
  @override
  _i4.DTOMapper<_i7.PasswordDTO, _i8.Account> get accountMapper =>
      (super.noSuchMethod(
        Invocation.getter(#accountMapper),
        returnValue: _FakeDTOMapper_1<_i7.PasswordDTO, _i8.Account>(
          this,
          Invocation.getter(#accountMapper),
        ),
      ) as _i4.DTOMapper<_i7.PasswordDTO, _i8.Account>);
  @override
  _i5.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_2(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.Logger);
  @override
  _i9.Future<List<_i8.Account>> get accounts => (super.noSuchMethod(
        Invocation.getter(#accounts),
        returnValue: _i9.Future<List<_i8.Account>>.value(<_i8.Account>[]),
      ) as _i9.Future<List<_i8.Account>>);
  @override
  _i9.Future<List<_i8.Account>> update(List<_i8.Account>? accounts) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [accounts],
        ),
        returnValue: _i9.Future<List<_i8.Account>>.value(<_i8.Account>[]),
      ) as _i9.Future<List<_i8.Account>>);
}
